#!/usr/bin/env python

import os
import os.path
import re
import tarfile
import zipfile

import boto3
import botocore
import click
import docker

DEFAULT_S3_BUCKET = 'probcomp-lambda'
DEFAULT_TAG = 'probcomp/iventure-aws-lambda'
DEFAULT_TIMEOUT = 90
DEFAULT_MEMORY = 128


def handler(package, method):
    """
    Construct AWS Lambda handler from Python package and method
    """
    pkg = os.path.splitext(os.path.basename(package))[0]
    return "{}.{}".format(pkg, method)


def get_archive(container, function):
    """
    Extract Python dependencies from Docker container
    """
    archive = function + '.tar'
    if os.path.exists(archive):
        os.remove(archive)

    with open(archive, "wb") as f:
        archive, _ = container.get_archive('/venv/lib/python2.7/site-packages')
        f.write(archive.read())


def convert_archive_to_zip(function, package):
    """
    Create AWS Lambda package from tarball
    """
    tarf = tarfile.open(function + '.tar', 'r')

    archive = function + '.zip'
    if os.path.exists(archive):
        os.remove(archive)
    zipf = zipfile.ZipFile(archive, 'a', compression=zipfile.ZIP_DEFLATED)

    for m in tarf.getmembers():
        f = tarf.extractfile(m)
        name = re.sub(r'site-packages[/]', '', m.name)
        if not name:
            continue
        # Ignore base installation files
        if re.match(r'easy_install|pkg_resources|pip|setuptools|wheel', name):
            continue
        # Ignore compiled Python files
        if name.endswith('.pyc'):
            continue
        # Ignore if not a file
        if not f:
            continue
        zipf.writestr(name, f.read())

    # Add Lambda handler
    zipf.write(package, os.path.basename(package))

    zipf.close()
    tarf.close()


@click.group()
@click.option('--role', envvar='AWS_ROLE_ARN', type=str, help='Role ARN')
@click.option('--profile', default='default', help='AWS credential profile')
@click.option('--bucket', envvar='AWS_S3_BUCKET', default=DEFAULT_S3_BUCKET,
              type=str, help='S3 bucket to upload deployment')
@click.pass_context
def cli(ctx, role, profile, bucket):
    ctx.obj['ROLE'] = role
    ctx.obj['PROFILE'] = profile
    ctx.obj['BUCKET'] = bucket


@cli.command('build')
@click.argument('function')
@click.option('--tag', default=DEFAULT_TAG, help='Tag for generated Docker image')
@click.pass_context
def lambda_build(ctx, function, tag):
    """
    Build image with dependencies
    """
    click.secho("building dependencies for AWS Lambda function ({})".format(function), fg='green')
    client = docker.from_env()
    client.images.build(path='.', tag=tag)


@cli.command('package')
@click.argument('function')
@click.argument('package')
@click.option('--tag', default=DEFAULT_TAG, help='Tag for generated Docker image')
@click.pass_context
def lambda_package(ctx, function, package, tag):
    """
    Create AWS Lambda package
    """
    click.secho("packaging AWS Lambda function ({})".format(function), fg='green')
    client = docker.from_env()
    container = client.containers.run(tag, detach=True)
    container.logs()
    get_archive(container, function)
    convert_archive_to_zip(function, package)
    container.remove()


@cli.command('deploy')
@click.argument('function')
@click.argument('package')
@click.argument('method')
@click.option('--timeout', default=DEFAULT_TIMEOUT, help='Timeout for AWS Lambda function (seconds)')
@click.option('--memory', default=DEFAULT_MEMORY, help='Maximum memory size for AWS Lambda function (MB)')
@click.pass_context
def lambda_deploy(ctx, function, package, method, timeout, memory):
    """
    Deploy to AWS Lambda
    """
    if ctx.obj['PROFILE']:
        session = boto3.Session(profile_name=ctx.obj['PROFILE'])
        s3_client = session.client('s3')
        lambda_client = session.client('lambda')
    else:
        s3_client = boto3.client('s3')
        lambda_client = boto3.client('lambda')

    click.secho("uploading AWS Lambda function ({})".format(function), fg='green')

    try:
        s3_client.head_bucket(Bucket=ctx.obj['BUCKET'])
    except botocore.exceptions.ClientError:
        s3_client.create_bucket(Bucket=ctx.obj['BUCKET'])

    archive = function + '.zip'
    with open(archive, 'rb') as f:
        s3_client.upload_fileobj(f, ctx.obj['BUCKET'], archive)

    click.secho("deploying AWS Lambda function ({})".format(function), fg='green')

    lambda_handler = handler(package, method)

    try:
        lambda_client.get_function(FunctionName=function)
        lambda_client.update_function_configuration(
            FunctionName=function,
            Handler=lambda_handler)
        lambda_client.update_function_code(
            FunctionName=function,
            S3Bucket=ctx.obj['BUCKET'],
            S3Key=archive)
    except botocore.exceptions.ClientError:
        lambda_client.create_function(
            FunctionName=function,
            Runtime='python2.7',
            Timeout=timeout,
            MemorySize=memory,
            Role=ctx.obj['ROLE'],
            Handler=lambda_handler,
            Code={'S3Bucket': ctx.obj['BUCKET'], 'S3Key': archive})


@cli.command('run')
@click.argument('function')
@click.argument('payload', nargs=-1, required=False, default=None)
@click.pass_context
def lambda_run(ctx, function, payload):
    """
    Run deployed AWS Lambda function
    """
    click.secho("invoking AWS Lambda function ({})".format(function), fg='green')

    if ctx.obj['PROFILE']:
        session = boto3.Session(profile_name=ctx.obj['PROFILE'])
        client = session.client('lambda')
    else:
        client = boto3.client('lambda')

    response = client.invoke(FunctionName=function)
    click.echo(response['StatusCode'])


@cli.command('all')
@click.argument('function')
@click.argument('package')
@click.argument('method')
@click.argument('payload', nargs=-1, required=False, default=None)
@click.option('--tag', default=DEFAULT_TAG, help='Tag for generated Docker image')
@click.option('--timeout', default=DEFAULT_TIMEOUT, help='Timeout for AWS Lambda function (seconds)')
@click.option('--memory', default=DEFAULT_MEMORY, help='Maximum memory size for AWS Lambda function (MB)')
@click.pass_context
def lambda_all(ctx, function, package, method, payload, tag, timeout, memory):
    """
    Build-package-deploy-run in one step
    """
    ctx.invoke(lambda_build, function=function, tag=tag)
    ctx.invoke(lambda_package, function=function, package=package, tag=tag)
    ctx.invoke(lambda_deploy, function=function, package=package, method=method, timeout=timeout, memory=memory)
    ctx.invoke(lambda_run, function=function, payload=payload)


if __name__ == '__main__':
    cli(obj={})
